param location string = 'australiaeast'
param containerGroupName string
param storageAccountName string
param publicUrl string = '${containerGroupName}.{location}.azurecontainer.io'
param createAutomationAccount bool = false

// A storage account to store the data for the containers
resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    dnsEndpointType: 'Standard'
    allowedCopyScope: 'AAD'
    allowCrossTenantReplication: false
    isSftpEnabled: false
    isNfsV3Enabled: false
    minimumTlsVersion: 'TLS1_2'
    allowBlobPublicAccess: false
    allowSharedKeyAccess: true
    largeFileSharesState: 'Enabled'
    isHnsEnabled: true
    supportsHttpsTrafficOnly: true
    accessTier: 'Hot'
    encryption: {
      requireInfrastructureEncryption: true
      services: {
        file: {
          enabled: true
          keyType: 'Account'
        }
      }
      keySource: 'Microsoft.Storage'
    }
    networkAcls: {
      bypass: 'AzureServices'
      defaultAction: 'Allow'
      ipRules: []
      virtualNetworkRules: []
    }
  }
}

resource fileServices 'Microsoft.Storage/storageAccounts/fileServices@2023-05-01' = {
  name: 'default'
  parent: storageAccount
  properties: {
    protocolSettings: {
      smb: {
        versions: 'SMB3.0'
      }
    }
    shareDeleteRetentionPolicy: {
      enabled: false
      allowPermanentDelete: true
    }
  }
}

resource caddyDataFileShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2023-05-01' = {
  name: '${containerGroupName}-caddydata'
  parent: fileServices
  properties: {
    shareQuota: 10
    accessTier: 'TransactionOptimized'
    enabledProtocols: 'SMB'
  }
}

resource caddyConfigFileShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2023-05-01' = {
  name: '${containerGroupName}-caddydconfig'
  parent: fileServices
  properties: {
    shareQuota: 10
    accessTier: 'TransactionOptimized'
    enabledProtocols: 'SMB'
  }
}

resource n8nFileShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2023-05-01' = {
  name: '${containerGroupName}-n8ndata'
  parent: fileServices
  properties: {
    shareQuota: 10
    accessTier: 'TransactionOptimized'
    enabledProtocols: 'SMB'
  }
}

resource containerGroup 'Microsoft.ContainerInstance/containerGroups@2024-05-01-preview' = {
  name: containerGroupName
  location: location
  properties: {
    sku: 'Standard'
    containers: [
      {
        name: '${containerGroupName}-caddy'
        properties: {
          // https://hub.docker.com/_/caddy
          image: 'docker.io/caddy:latest'
          command: [
            'caddy'
            'reverse-proxy'
            '--from'
            '${publicUrl}'
            '--to'
            'localhost:5678'
          ]
          resources: {
            requests: {
              cpu: 1
              memoryInGB: 1
            }
          }
          ports: [
            {
              port: 443
              protocol: 'TCP'
            }
          ]
          volumeMounts: [
            {
              name: caddyDataFileShare.name
              mountPath: '/data'
              readOnly: false
            }
            {
              name: caddyConfigFileShare.name
              mountPath: '/config'
              readOnly: false
            }
          ]
        }
      }
      {
        name: '${containerGroupName}-n8n'
        properties: {
          // https://hub.docker.com/r/n8nio/n8n
          image: 'docker.io/n8nio/n8n:latest'
          resources: {
            requests: {
              cpu: 1
              memoryInGB: 2
            }
          }
          ports: [
            {
              port: 5678
              protocol: 'TCP'
            }
          ]
          volumeMounts: [
            {
              name: n8nFileShare.name
              mountPath: '/home/node/.n8n'
              readOnly: false
            }
          ]
          environmentVariables: [
            {
              name: 'GENERIC_TIMEZONE'
              value: 'Australia/Brisbane'
            }
            {
              name: 'TZ'
              value: 'Australia/Brisbane'
            }
            {
              name: 'N8N_DIAGNOSTICS_ENABLED'
              value: 'false'
            }
            {
              name: 'N8N_LOG_OUTPUT'
              value: 'console,file'
            }
            {
              name: 'WEBHOOK_URL'
              value: 'https://${publicUrl}/'
            }
          ]
        }
      }
    ]
    osType: 'Linux'
    restartPolicy: 'Never'
    ipAddress: {
      type: 'Public'
      dnsNameLabel: containerGroupName
      autoGeneratedDomainNameLabelScope: 'Unsecure'
      ports: [
        {
          protocol: 'TCP'
          port: 443
        }
      ]
    }
    volumes: [
      {
        name: caddyDataFileShare.name
        azureFile: {
          shareName: caddyDataFileShare.name
          storageAccountName: storageAccountName
          storageAccountKey: storageAccount.listKeys().keys[0].value
          readOnly: false
        }
      }
      {
        name: caddyConfigFileShare.name
        azureFile: {
          shareName: caddyConfigFileShare.name
          storageAccountName: storageAccountName
          storageAccountKey: storageAccount.listKeys().keys[0].value
          readOnly: false
        }
      }
      {
        name: n8nFileShare.name
        azureFile: {
          shareName: n8nFileShare.name
          storageAccountName: storageAccountName
          storageAccountKey: storageAccount.listKeys().keys[0].value
          readOnly: false
        }
      }
    ]
  }
}

resource automationAccount 'Microsoft.Automation/automationAccounts@2023-11-01' = if (createAutomationAccount) {
  name: '${containerGroupName}-aa'
  location: location
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    publicNetworkAccess: true
    disableLocalAuth: true
    sku: {
      name: 'Basic'
    }
  }
}

param baseDate string = utcNow('yyyy-MM-dd')

resource stopSchedule 'Microsoft.Automation/automationAccounts/schedules@2023-11-01' = if (createAutomationAccount) {
  name: '${containerGroupName}-stopSchedule'
  parent: automationAccount
  properties: {
    frequency: 'Day'
    interval: 1
    startTime: '${dateTimeAdd(baseDate, 'P1D', 'yyyy-MM-dd')}T21:30:00+10:00'
    timeZone: 'Australia/Brisbane'
  }
}

resource stopRunbook 'Microsoft.Automation/automationAccounts/runbooks@2023-11-01' = if (createAutomationAccount) {
  name: '${containerGroupName}-stopRunbook'
  location: location
  parent: automationAccount

  properties: {
    runbookType: 'PowerShell72'
    logVerbose: false
    logProgress: false
    description: 'Stop the container group every night to save money'
    publishContentLink: {
      uri: 'https://gist.githubusercontent.com/pm7y/ab5c855752b53550ac4689dba793f33a/raw/f92b33efe9d5c882a570f4695816457dbf3634c3/StopN8NContainerGroup.ps1'
      contentHash: {
        algorithm: 'SHA256'
        value: 'f720f24c45596e9279734bf8e1cbb4d46bdd0ec52f77ebb485b2ede043a745c3'
      }
      version: '1.0'
    }
  }
}

resource jobSchedule 'Microsoft.Automation/automationAccounts/jobSchedules@2023-11-01' = if (createAutomationAccount) {
  name: guid(resourceGroup().id) // must be a guid
  parent: automationAccount
  properties: {
    runbook: {
      name: stopRunbook.name
    }
    schedule: {
      name: stopSchedule.name
    }
  }
}

resource containerInstanceContributorRole 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = if (createAutomationAccount) {
  scope: subscription()
  name: '5d977122-f97e-4b4d-a52f-6b43003ddb4d' // Azure Container Instances Contributor Role
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = if (createAutomationAccount) {
  scope: containerGroup
  name: guid(containerGroup.id, containerInstanceContributorRole.id)
  properties: {
    roleDefinitionId: containerInstanceContributorRole.id
    principalId: automationAccount.identity.principalId
    principalType: 'ServicePrincipal'
  }
}

// az login
// az group create --name m7yn8n-rg --location australiaeast
// az deployment group create --resource-group m7yn8n-rg --template-file n8n-aci.bicep --parameters location=australiaeast containerGroupName=m7yn8ngroup storageAccountName=m7yn8nstorage
